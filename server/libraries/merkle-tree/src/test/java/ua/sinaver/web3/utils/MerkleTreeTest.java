/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ua.sinaver.web3.utils;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.bouncycastle.util.encoders.Hex;
import org.junit.Test;

public class MerkleTreeTest {

    @Test
    public void testRootCalculation() {
        final List<String> leaves = new ArrayList<>(Arrays.asList("A", "B", "C", "D", "E", "F", "G", "H", "I"));
        String rootHash = "Hash(Hash(Hash(Hash(Hash(A)Hash(B))Hash(Hash(C)Hash(D)))Hash(Hash(Hash(E)Hash(F))Hash(Hash(G)Hash(H))))Hash(I))";
        MerkleTree merkleTree = new MerkleTree(leaves, (input) -> {
            /*
             * MessageDigest digest256 = new Keccak.Digest256();
             * return digest256.digest(input);
             */
            return String.format("Hash(%s)", new String(input)).getBytes();
        });

        assertEquals(String.format("Checking if %s equal to %s", rootHash,
                merkleTree.getRoot()),
                rootHash, new String(Hex.decode(merkleTree.getRoot())));

        int leafIndex = 3;
        List<ProofData> proof = merkleTree.getProof(leafIndex);
        assertTrue(String.format("Checking if proof is correct"),
                merkleTree.verifyProof(proof, leaves.get(leafIndex), Hex.toHexString(rootHash.getBytes())));

    }
}
